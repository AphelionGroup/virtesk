diff -pru vdsm-4.16.30/vdsm/clientIF.py vdsm-4.16.30-vdsm-spice-disconnect-actions-backport/vdsm/clientIF.py
--- vdsm-4.16.30/vdsm/clientIF.py 2015-11-23 16:01:24.000000000 +0100
+++ vdsm-4.16.30-vdsm-spice-disconnect-actions-backport/vdsm/clientIF.py 2016-04-05 11:45:16.000000000 +0200
@@ -556,9 +556,10 @@ class clientIF(object):
                             'authScheme %s subject %s',
                             phase, localAddr, remoteAddr, authScheme, subject)
                 if phase == libvirt.VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE:
-                    v.onConnect(remoteAddr['node'])
+                    v.onConnect(remoteAddr['node'], remoteAddr['service'])
                 elif phase == libvirt.VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT:
-                    v.onDisconnect()
+                    v.onDisconnect(clientIp=remoteAddr['node'],
+                                   clientPort=remoteAddr['service'])
             elif eventid == libvirt.VIR_DOMAIN_EVENT_ID_WATCHDOG:
                 action, = args[:-1]
                 v._onWatchdogEvent(action)
diff -pru vdsm-4.16.30/vdsm/virt/vm.py vdsm-4.16.30-vdsm-spice-disconnect-actions-backport/vdsm/virt/vm.py
--- vdsm-4.16.30/vdsm/virt/vm.py 2015-11-23 16:01:24.000000000 +0100
+++ vdsm-4.16.30-vdsm-spice-disconnect-actions-backport/vdsm/virt/vm.py 2016-04-05 11:43:31.000000000 +0200
@@ -1960,6 +1960,7 @@ class Vm(object):
         self._powerDownEvent = threading.Event()
         self._liveMergeCleanupThreads = {}
         self._shutdownReason = None
+        self._clientPort = ''
 
     def _get_lastStatus(self):
         # note that we don't use _statusLock here. One of the reasons is the
@@ -2471,15 +2472,51 @@ class Vm(object):
         except Exception:
             self.log.error("Reboot event failed", exc_info=True)
 
-    def onConnect(self, clientIp=''):
+    def onConnect(self, clientIp='', clientPort=''):
         if clientIp:
             self.conf['clientIp'] = clientIp
+            self._clientPort = clientPort
 
     def _timedDesktopLock(self):
-        if not self.conf.get('clientIp', ''):
-            self.guestAgent.desktopLock()
+        # This is not a definite fix, we're aware that there is still the
+        # possibility of a race condition, however this covers more cases
+        # than before and a quick gain
+
+        if not self.conf.get('clientIp', '') and not self.destroyed:
+            delay = config.get('vars', 'user_shutdown_timeout')
+            timeout = config.getint('vars', 'sys_shutdown_timeout')
+            daction = 'undef'
+
+            if 'spice_disconnect_action' in self.conf['custom']:
+                daction = (
+                    self.conf['custom']['spice_disconnect_action'].lower()
+                )
+
+            if daction == 'lock' or daction == 'undef':
+                self.guestAgent.desktopLock()
+            elif daction == 'logoff':
+                self.guestAgent.desktopLogoff(True)
+            elif daction == 'reboot':
+                self.shutdown(delay=delay, reboot=True, timeout=timeout,
+                              message='Scheduled reboot on disconnect',
+                              force=True)
+            elif daction == 'shutdown':
+                self.shutdown(delay=delay, reboot=False, timeout=timeout,
+                              message='Scheduled shutdown on disconnect',
+                              force=True)
+            elif daction == 'noop':
+                pass
+            else:
+                self.guestAgent.desktopLock()
+
+    def onDisconnect(self, detail=None, clientIp='', clientPort=''):
+        if self.conf['clientIp'] != clientIp:
+            self.log.debug('Ignoring disconnect event because ip differs')
+            return
+        if self._clientPort and self._clientPort != clientPort:
+            self.log.debug('Ignoring disconnect event because ports differ')
+            return
 
-    def onDisconnect(self, detail=None):
         self.conf['clientIp'] = ''
         # This is a hack to mitigate the issue of spice-gtk not respecting the
         # configured secure channels. Spice-gtk is always connecting first to
@@ -2494,6 +2531,22 @@ class Vm(object):
         # Multiple desktopLock calls won't matter if we're really disconnected
         # It is not harmful. And the threads will exit after 2 seconds anyway.
         _DESKTOP_LOCK_TIMEOUT = 2
+
+        if 'spice_disconnect_waittime_seconds' in self.conf['custom']:
+            try:
+                _DESKTOP_LOCK_TIMEOUT = int(
+                    self.conf['custom']['spice_disconnect_waittime_seconds']
+                )
+            except ValueError:
+                self.log.error(
+                    "Cannot convert spice_disconnect_waittime_seconds={0} to "
+                    "int. Proceeding with default value.".format(
+                        self.conf['custom'][
+                            'spice_disconnect_waittime_seconds'
+                        ]
+                    ),
+                    exc_info=True)
+
         timer = threading.Timer(_DESKTOP_LOCK_TIMEOUT, self._timedDesktopLock)
         timer.start()

